

django api 


pip install django_restframwork

install_apps = [

	''''
	'''',
	'rest_framework',

]

app me serializers.py karke ek file bannvo 

from rest_framework import serializers 
from .models import model_name

class based serialization                              # jaise model bante he vaise

class model_nameSerializers(serializers.Serializers)
	title = serializers.CharField()
	data  = serializers.DateField()
 
----------------------- this is a 1 method ------------------------- 

class model_name(serializers.ModelSerializers):                        # ye model serializer class he easy and efficient 
	name = serializers.CharField(read_only=True)                  # we can coustimize fields 
 	class Meta:																								
		model = model_name
		fields = ['first_name','second_name']
		exclude = ['field_name']

class model_name(serializers.HyperlinkedModelSerializers):         							# hyperlinked se 																									key:value me value url me convert hota he 						
		class Meta:
		model = model_name 



--------------------------- second methods -----------------------------


------------------------------------------Function based View ------------------

isme views.py me normal function  likhe jate he or decorator add karna padta he 

from rest_framework.decorators import api_view
from rest_framework.response import Response
#here you can add authtinication decorators 
decorators are useful in function based view 

@api_view(['GET'])
def post_collection(request):
	return response

@api_view(['GET','POST'])
def POST_data(request):
	if request.method == "GET":
		model_data = model_name.object.all()
		serializer = serializer_name(model_data,many=True)
		return Response(serilaizer.data)
	elif request.method == "POST":
		serializer = serializer_name(data=request.data)
		if serilaizer.is_valid():
			serializer.save()
			reutrn Response(serializer.data)
		else:
			return Response(serializer.errors)




------------------------ class based view in views.py -------------------------- 


----------------- method 1 simple APIView ---------------------------------
from rest_framework.response import Response 
from rest_framework.views import APIView    # class based view 


class Test(APIView):
	def get(self , request):
		data = { 'key':'value' }    # mannual data 
		model_data = model_name.objects.all()
		serializer_data = Sericlaizer_class(model_data , many=True).data or .error  
		return Response(serializer_data)    
 
		return Response(data)             # return Manual Data 

	def post(self , requests):
		data = requests.get()
		serializer = Serializer_class(data)
		if serializer.is_valid():
			serializer.save()
			return Response(serializer.data)
		else:
			return Response(serializer.error)



in urls.py 
path('pathname/',Test.as_view(),name='test')  

-------------------------- method 1 end -------------------------------- 

--------------------- method2  ViewSets  -------------------------------- 

view methods using viewSet 
views.py 

from rest_framework import viewsets

class modelsviewset(viewset.ModelViewSet):
	queryset = model_name.objects.all()			 # ye viewset ke liye use hota he 
	serializer = serializer_name 


urls.py 
from app.views import classname 
from rest_framework import routers 
router = routers.register(r'apiview',classname,name='something')

urlpatterns = [
	path('',include(router.urls)),

]


----------------------------- method 3 generics views --------------------------- 
views.py 
from rest_framework import generics         # class based view me use hota he 

class class_name_serializer(generics.ListCreateAPIView):              # ye post method ke liye he 
	queryset  = model_name.object.all()	
	serializer_class = serializer 

class class_name_serializer(generics.RetrieveDestroyAPIView):              # ye method delete ke liye he 
 	queryset = model_name.object.all()
	serializer_class = serializer

in urls.py 
urlpatterns = [
	path('apiview/<int:pk>',class_name_seriaizer.as_view(),name='random_name')           # delete ke time dalna padta he   
]																							post ke time nahi <int:pk>
 
-------------------------- end ----------------------------------- 


------------------------- Django-filters ------------------------------ 

pip install django-filter

install_apps = [
	
	''',
	django_filters,
	
]

setting.py

REST_FRAMEWORK = {
	'DEFAULT_FILTER_BACKENDS':[
	'django_filters.rest_framework.DjangoFilterBackends'

]


}




filters.py 

import django_filters 

class Model_name_Filter(django_filters.FilterSet)
	class Meta:
		model = model_name
		fields = ('fileds_name')
		
		fields  = {
		'filed_name':['icontains'],
		'field_name':['icontains']
	
	}


views.py 
from rest_framework.filters import SearchFilter    
from django_filters.rest_framework import DjangofilterBackend           # use for singal view  

class PersonView(ListAPIView):
	queryset = model_name.objects.all()
	serailizer_class = 
	filter_backends = (DjangoFilterBackend , serachFilter)
	filter_fields = ('id','name') # filelds name serach in model.py      #in bowsable api in create filter button


class StudentList(ListApiView):                # djangoFilterbackend exapmle
	queryset = student.objects.all()
	serializer_class = StudentSerializer
	filter_backends = [DjangoFilterBackend]
	filterset_fields = ['name' , 'city']
	
	http://127.0.0.1:8000/studentapi/?name=ajay&city=mumbai     ye format me op milega 

---------------- searchFilter Example -------------------------
class StudentListView(ListApiView):
	queryset = Student.objects.all()
	serializer_class = StudentSerializer
	filter_backends = [SearchFilter]
	search_fields = ['city']
	search_fields = ['city','name']	

http://127.0.0.1:8000/studentapi/?search=Mumbai

'^' start-with search
'=' Exact matches
'@' Full-text search (Currently only supported Django`s Postgresql backend)
'$' regex search 

how to use this 

search_fields = ['^city']         #http://127.0.0.1/api/?city=half_name_city(navi mum)
search_fields = ['=city']

url me search parameter default he usko change karne ke liye global setting  me define karna padta he 

REST_FRAMEWORK = {
	'SEARCH_PARAM':'q'
}

https://127.0.0.1:8000/api/?q=mumbai
-------------------------- search filter end  ------------------

--------------------- Ordering Filter -------------------------------- 

class StudentListView(generics.ListApiView):
	queryset = Student.objects.all()
	serializer_class =StudentSerializer
	filter_backends = [OrderingFilter]
	ordering_fields = ['name']                  # iske base pe ordering hoga matlab a se sure hone wale nam pahle ayenge

---------------------- Ordering filter End ------------------------------- 




class modelList(ListApiView):
	queryset = model_name.objects.all()             # get queryset override method 
	serializer_class = Model_name_serializer	annoymous user ko data nahi dikhtha
	def get_queryset(self):                                                # request.user   me current user hota he
		user =self.requests.user
		return Student.objects.filter(passby=user)



--------------------- django-filter-end ------------------------------

------------------------- end ------------------------------------------------ 


------------------------------- authentication and authrization --------------------------------- 


DjangomodelPermission Class -- powerful Class  we can change permission in admin panel

---------------- Custom Authentication -----------------
custom.py 
from rest_framework.authentication import BaseAuthentication 
from  rest_framework.exception import AuthenticationFailed

class CutomAuthentication(BaseAuthentication):
	def authentication(self.request):
		pass                                                    # kudhka authentication ka code 
		# yaha pe normal django login wala code ayega


ye class views.py authentication_classes=[CustomAuthentication]
				  permission_classes = [IsAuthenticated]


# Custom permission Classes 
custompermissiom.py 
from rest_framework.permission import BasePermission


class Mypermission(BasePermission):
	def has_permission(self,request,view):
		if request.method == "GET":
			return True
		else:
			return False

views.py 

class StudentView(Apiview):    # view as per your choice 
	queryset = model_name.objects.all()
	serliazer_class = serializer 
	authentication_classes = [sessionAuthentication,]
	permission_classes = [MyPermission,]

----------------- custom authentication end ---------------------------- 





views.py 

from rest_framework.permissions import ['Allowany' , 'IsadminUser','IsAuthenticated','IsAuthenticatedreadOnly'] # this 4 are there 
from rest_framework.views import APIView
from rest_framework.response import Response

 
class view(APIView):
	persmission_classes = [IsAuthenticated,]
	def get(self , request):
		return Response()
	def post(self , request):
		return Response
	

-------------------- django session ---------------------------------------

REST_FRAMEWORK = {
	
	'DEFAULT_PERMISSION_CLASSES':[
	'rest_framework.permission.IsAuthenticated',
			],

	'DEFAULT_AUTHENTICATION_CLASSES':[
		'rest_framework.authentication.SessionAuthentication',


	]

	
}

urls.py 
from django.contrib.auth.views import login           #session authentication use in default django login  
														use in authorization process 
urlpatterns = [
	path('login/',login,name='login')


]

views.py 
class StudentModelView(APiviews):
	queryset = model_name.objects.all()
	serializer_class = [SessionAuthentication]
	permission_classes = [IsAuthenticated]



------------------------------------ django session end --------------------------- 

--------------- token creation ----------------------  Token Authentication ----------------- 
install_apps = [
	'rest_framework',
	'rest_framework.authtoken',           # model create hota he db me 

]

REST_FRAMEWORK = {

'DEFAULT_AUTHENTICATION_CLASSES':[

    'rest_framework.authentication.TokenAuthentication'
    

]													# ye global setting he har api endpoint pe authentication lagega
															
	'DEFAULT_PERMISSION_CLASSES':[
		'rest_framework.permission.IsAuthenticated',

	]

}

local setting 
from rest_framework.authentication import TokenAuthentication 
from rest_framework.permissions import IsAuthenticated   


urls.py 
rest_framework.authtoken.views import obtain_auth_token  # this obtain_auth_token work as view.methods in urls 

urlpatterns = [
	path('api/token',obtain_auth_token , name='obtain-token')
]

post request bejhne pe token create hoga username and password ka jaruruat he 

http POST http://localhost:8000/api/token username='Ajay' password='password' # token is obtained 

http http://localhost:8000/api/authorize_resource/ "Authorization: Token 4654646df4rfregr6g4r5g4r56e" # you get acces to resource 

---------------------------- token creation end ----------------------------- 


------------------- jwt auth token ------------------------------------- 
pip install django-simple-jwt   not sure check once 

urls.py 

from rest_framework_simplejwt.views import TokenObtainPairView , TokenRefreshView , TokenVerifyView 

ye classes jwt ke views me already hoti he apan ko sirf urls banni he 

urlpatterns  = [

	path('gettoken/',TokenObtainPairView.as_view(),name='gettoken'),         #token milta he 
    path('refreshtoken/',TokenRefreshView.as_view(),name='refersh_token'),    # refesh karne ke liye 
    path('verifytoken/',TokenVerifyView.as_view(),name='verifytoken'),       

]

views.py 
from  rest_framework_simplejwt.authentication import JWTAuthentication

class apiView(method):
	model = model.name.object.all()
	serializer_class = Serilaizer
	authentication_classes = [JWTAuthentication,]               isse authentication lag jayegi 
    permission_classes = [IsAuthenticated,]


curl request = httpie  same he 


http http://127.0.0.1:8000/gettoken/ username=ajay password="root"         #token milega 
http http://127.0.0.1:8000/refreshtoken/  refresh=refresh_token        # ye refersh token apnekp gettoken ke time milta he 
																	firse username or password ka jaruruat nahi he 5min val

http http://127.0.0.1:8000/verifytoken/           just for verification 

http GET  http://127.0.0.1:8000/apiview/ "Authorization:Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjEyNzgxOTIyLCJqdGkiOiIwMDMxNzc3MWNjYzY0ZGQ5Yjk2OWE0YWYxMmQzYWJjNCIsInVzZXJfaWQiOjF9.c-IHFoFwYX_f3McwAwc4TriB5ZPDMDKT94sAHwzUKlo"

real req for accesing api  

use POST method for creat elements add field in command like name="ajay"

use Delete  Put same for this you need user_id



setting.py 
SIMPLE_JWT = {
	"ACCESS_TOKEN_LIFETIME":timedelta(minutes=10)       # you can increase time of token
}




---------------- jwt End --------------------------------------------


----------------------- throttling or rate limmit in Api -------------------------

setting.py 
--------- global scope -----------
REST_FRAMEWORK = {
	'DEFAULT_THROTTLE_CLASSES':[
	'rest_framework.throttling.AnonRateThrottle',
	'rest_framework.throttling.UserRateThrottle'

	],

	'DEFAUL_THROTTLE_RATES':{
	'anon':'100/day/second/mintute/hour',
	'user':'1000/day/second/mintute/hour'
	}
}
------------------------------------------ 
---------------------local scope -------------------------- 

views.py 
from rest_framework.throttling import AnonRateThrottle, UserRateThrottle 
Class APIView():
	queryset = model_name.objects.all()
	serializer_class = Serializer_name
	authentication_classes = [sessionAuthentication]
	permission_classes = [IsAuthenticated]
	throttle_classes = [AnonRateThrottle , UserRateThrottle]




REST_FRAMEWORK = {                                  # ye local me ayega  
	'DEFAUL_THROTTLE_RATES':{
	'anon':'100/day/second/mintute/hour',
	'user':'1000/day/second/mintute/hour'
	}
}

--------------- apne hisab se throllting set karne ke liye ----------------- 
thrttling.py me ye file rakho 
from rest_framework.throttling import UserRateThrottle 
class JackRateThrottle(UserRateThrottle):
	scope = 'jack'

REST_FRAMEWORK = {                                  # ye local me ayega   # nahi samja to geeky source ka viedo 
	'DEFAUL_THROTTLE_RATES':{
	'anon':'100/day/second/mintute/hour',
	'user':'1000/day/second/mintute/hour'
	'jack':'3/minute',
	}
}


views.py 
from app.throttling import JackRateThrottle        #abhi isko throttle classes me add karo 

class --():
	-- 
	throttle_classes= [JackRateThrottle,]
---------------------------------------------------------------------------- 

ScopedRateThrottle 
from rest_framework.throttling import ScopedRateThrottle 

class --():
	-- 
	throttle_classes = [ScopedRateThrottle]
	throttle_scope = 'viewapi'


REST_FRAMEWORK = {
	'DEFAULT_THROTTLE_RATES':{
		'viewapi':'5/hour',
		
	}
}

------------------------------ rate limit end -------------------------------

------------------------ rest-auth third party lib  ------------------------------

pip install django-rest-auth

install_apps = [
	'rest_auth'
]
	
urls.py 
path('rest-auth/',include('rest_auth.urls'))



-----------------------------------------------------end -----------------------------