



jwt exploitation 


how to recognize jwt token 

request me cookie ke niche bada random string rehta he 
usually it start with "ey" this token are base64 encoded 

jwt token 3 parts me bata rehta he first part header dusra payload and tisra algorithm 
header  = {"TYP":"JWT","ALG":"HS256"}
payload = {"id":"1234","name":"AJAY","admin":True}
signature  = HS256 { header + payload } it is signed by a server by a secret key and alg which is mention


types of attacks 
1]  None alg attacks       isme alg ko none karte he and payload ko change kar sakthe he  json web token karke ext he 


2] alg change attack 

RSA256 
ras use asymmetrically sign the token is uses the priavate key to sign the token 
and public key to verify the token 

HS256
symmetric use the same key to sign the token and same key to verify the token 

RS256 se HS256 kardo and paylaod change kardo  pyton script se naya token banna padta he farah video is useful 
 
CODE USED TO GENERATE SIGNATURE:

https://github.com/farah-hawa/Jwt-code

public_key.pem ye file content discovery ke time dundhni padegi jsk.json karke 


Crack the key
As previously stated, the HS256 algorithm uses a secret key to sign and verify messages.
 If we know this key, we can create our own signed messages.
If the key is not sufficiently strong it may be possible to break it using a brute-force or dictionary attack. 
By trying a lot of keys on a JWT and checking whether the signature is valid we can discover the secret key. 
This can be done offline, without any requests to the server, once we have obtained a JWT.

There are several tools that can brute force the HS256 signature on a JWT:

https://github.com/jpadilla/pyjwt

3] signature is not Checked 

signature ko hi hata do and payload change kardo 

4] bruteforce the key 
BRUTE FORCING TOOLS:

jwtbrute: https://github.com/jmaxxz/jwtbrute

JWT cracker: https://github.com/brendan-rius/c-jwt-cracker






Here are 3 tips to bypass JWT token authentication.

Tip #1:

Capture the JWT.
Change the algorithm to None.
Change the content of the claims in the body with whatever you want e.g.: email: attacker@gmail.com
Send the request with the modified token and check the result.
Tip #2:

Capture the JWT token.
If the algorithm is RS256 change to HS256 and sign the token with the public key (which you can get by visiting jwks Uri / mostly it will be the public key from the site’s https certificate)
Send the request with the modified token and check the response.
You can party with the bounty if the backend doesn’t have the algorithm check.
Tip #3: Check for proper server-side session termination (OTG-SESS-006):

Check if the application is using JWT tokens for authentication.
If so, login to the application and capture the token. (Mostly web apps stores the token in the local storage of the browser)
Now logout of the application.
Now make a request to the privileged endpoint with the token captured earlier.
Sometimes, the request will be successful as the web apps just delete the token from browser and won’t blacklist the tokens in the backend.





